#!/usr/bin/env python
from unittest import *
from util.Tree import *
from util.List import *
#print root

'''
For example, given s = "aab",
Return
[
 ["aa","b"],
 ["a","a","b"]
]

    | a a b a a b
  --| -----------
  a | 1 1 0 0 1 0
  a | * 1 0 1 0 0
  b | * * 1 0 0 1
  a | * * * 1 1 0
  a | * * * * 1 0
  b | * * * * * 1

Description:
    1. odd:
        array[i][i] = 1
    
    1. create array
    2. DFS search
Time Complexity:
Result: AC
'''

class Solution:

    def createArray(self, s):
        n = len(s)
        array = [['*']*n for i in range(n)]
        # odd
        for i in range(n):
            array[i][i] = 1
            a = i-1
            b = i+1
            while a >=0 and b <n:
                if array[a+1][b-1] == 0:
                    array[a][b] = 0
                else:
                    if s[a] == s[b]:
                        array[a][b] = 1
                    else:
                        array[a][b] = 0
                a -= 1
                b += 1
        # even
        for i in range(n)[:-1]:
            if s[i] == s[i+1]:
                array[i][i+1] = 1
            else:
                array[i][i+1] = 0
            a = i-1
            b = i+2
            while a >=0 and b <n:
                if array[a+1][b-1] == 0:
                    array[a][b] = 0
                else:
                    if s[a] == s[b]:
                        array[a][b] = 1
                    else:
                        array[a][b] = 0
                a -= 1
                b += 1
        return array
    
    def solve(self, result, array, s, route, index):
        if index == len(s):
            result.append([item for item in route])
            return
        for i in range(index, len(s)):
            if array[index][i] != 0:
                route.append(s[index: i+1])
                self.solve(result, array, s, route, i+1)
                route.pop()
    
    def partition(self, s):
        if len(s) in (0, 1):
            return [[s]]
        array = self.createArray(s)
        result = []
        route = []
        self.solve(result, array, s, route, 0)
        return result

s = Solution()
print s.partition("ababb")

#List.prettyPrint(head)
#Tree.prettyPrint(root)
