#!/usr/bin/env python
from unittest import *
from util.Tree import *
from util.List import *
#print root

'''
Description:
    1. find kth element
Time Complexity:
Result: AC
    very important
'''

class Solution:
    def findKth(self, A, B, k):
        if len(B) < len(A): return self.findKth(B, A, k)
        if len(A) == 0: return B[k-1]
        if k == 1: return min(A[0], B[0])
        ia = min(k/2, len(A))
        ib = k-ia
        if A[ia-1] < B[ib-1]:
            return self.findKth(A[ia:], B, k-ia)
        elif A[ia-1] > B[ib-1]:
            return self.findKth(A, B[ib:], k-ib)
        else:
            return A[ia-1]
    
    def findMedianSortedArrays(self, A, B):
        if len(A) == 0 and len(B) == 0: return 0.0
        total = len(A)+len(B)
        if total%2 == 1:
            return self.findKth(A, B, (total/2)+1)
        else:
            return (self.findKth(A, B, total/2) + self.findKth(A, B, (total/2)+1))/2.0
    
A = [1,3,6,7]
B = [5,9,10]
s = Solution()
#print s.findMedianSortedArrays(A,B)
print s.findMedianSortedArrays([],[1])

#List.prettyPrint(head)
#Tree.prettyPrint(root)
