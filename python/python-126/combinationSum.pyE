#!/usr/bin/env python

class Solution:
    def solve(self, result, candidates, target, route, index):
        if sum(route) == target:
            result.append([item for item in route])
            return
        if index >= len(candidates) or sum(route) > target:
            return
        t = (target-sum(route))/(candidates[index])
        for i in range(t+1):
            sub_total = sum(route)
            if sub_total + (i)*candidates[index] <= target:
                route += [candidates[index]]*(i)
                self.solve(result, candidates, target, route, index+1)
                for j in range(i):
                    route.pop()
    
    def combinationSum(self, candidates, target):
        route = []
        result = []
        candidates.sort()
        self.solve(result, candidates, target, route, 0)
        return result

s = Solution()
candidates = [2,3,4,6,7]
target = 7


print s.combinationSum(candidates, target)
print s.combinationSum([2], 1)
print s.combinationSum([92,71,89,74,102,91,70,119,86,116,114,106,80,81,115,99,117,93,76,77,111,110,75,104,95,112,94,73], 310)


