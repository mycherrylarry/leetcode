#!/usr/bin/env python
from unittest import *
#print root

'''
Given a string S, find the longest palindromic substring in S.
You may assume that the maximum length of S is 1000,
and there exists one unique longest palindromic substring.

example:

    | a b a a b c
  --|-------------
  a | 1 0 3 0 0 0
  b | * 1 0 0 4 0
  a | * * 1 2 0 0
  a | * * * 1 0 0
  b | * * * * 1 0
  c | * * * * * 1

Description:
    1. for odd numbers:
        route[i][i] = 1
        if route[i][i] == 0:
            route[i-1][i+1] = 0
        else:
            if s[i-1] == s[i+1]:
                route[i-1][i+1] = route[i][i] + 2
            else:
                route[i-1][i+1] = 0
    2. for even numbers:
        if s[i] == s[i+1]:
            route[i][i+1] = 2
        else:
            route[i][i+1] = 0
        if route[i][i+1] == 0:
            route[i-1][i+2] = 0
        else:
            if s[i-1] == s[i+2]:
                route[i-1][i+2] = route[i][i+1] + 2
            else:
                route[i-1][i+2] = 0
    3. find max number and return its position

Time Complexity:
Result:
'''

class Solution:

    def longestPalindrome(self, s):
        if len(s) in (0, 1): return s
        n = len(s)
        route = [['*']*n for i in range(n)]
    
        # odd
        for i in range(n):
            route[i][i] = 1
            x, y = i-1, i+1
            while x >=0 and y <n:
                if route[x+1][y-1] == 0:
                    route[x][y] = 0
                else:
                    if s[x] == s[y]:
                        route[x][y] = route[x+1][y-1] + 2
                    else:
                        route[x][y] = 0
                x -= 1
                y +=1
        # even
        for i in range(n)[:-1]:
            if s[i] == s[i+1]:
                route[i][i+1] = 2
            else:
                route[i][i+1] = 0
            x, y = i-1, i+2
            while x >=0 and y <n:
                if route[x+1][y-1] == 0:
                    route[x][y] = 0
                else:
                    if s[x] == s[y]:
                        route[x][y] = route[x+1][y-1] + 2
                    else:
                        route[x][y] = 0
                x -= 1
                y +=1
    
        # find
        mx = [route[0][0], (0,0)]
        for i in range(n):
            for j in range(i, n):
                if route[i][j] > mx[0]:
                    mx = [route[i][j], (i,j)]
        start, end = mx[1]
        return s[start:end+1]
    

s = Solution()
print s.longestPalindrome('abba')

